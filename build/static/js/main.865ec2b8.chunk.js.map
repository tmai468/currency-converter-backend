{"version":3,"sources":["utils/currencyConverter.js","components/Notification.js","components/InputForm.js","components/OutputDiv.js","App.js","index.js"],"names":["numToText","ones","tens","sep","decimals","map","eachWord","substring","concat","toLowerCase","currencyConverter","inputNum","length","replace","isNaN","digits","split","dollar","cents","centsStr","dollarArr","console","log","slice","push","parseInt","i","str","a","x","Math","floor","y","z","shift","trim","Notification","notifString","InputForm","setErrorMessage","setOutputStr","useState","setInputNum","onSubmit","event","preventDefault","outStr","setTimeout","value","onChange","target","exception","numVer","Number","type","OutputDiv","outputStr","App","errorMessage","ReactDOM","render","document","getElementById"],"mappings":"wKAAMA,EAAY,CACdC,KAAM,CAAC,GAAI,MAAO,MAAO,QAAS,OAAQ,OAAQ,MAAO,QAAS,QAAS,OAAQ,MAAO,SAAU,SAAU,WAAY,WAAY,UAAW,UAAW,YAAa,WAAY,YACrLC,KAAM,CAAC,GAAI,GAAI,SAAU,SAAU,SAAU,QAAS,QAAS,UAAW,SAAU,UACpFC,IAAK,CAAC,GAAI,aAAc,YAAa,YAAa,aAAc,gBAAiB,gBAAiB,iBAGtG,IAAK,IAAIC,KAAYJ,EACjBA,EAAUI,GAAYJ,EAAUI,GAAUC,KAAI,SAAAC,GAAQ,OAAIA,EAASC,UAAU,EAAE,GAAGC,OAAOF,EAASC,UAAU,GAAGE,kBAGnH,IA+EeC,EA/EW,SAACC,GACvB,GAAwB,IAApBA,EAASC,OACX,MAAO,GAGT,GADAD,EAAWA,EAASE,QAAQ,IAAK,IAC7BC,MAAMH,GACR,MAAO,gBAaT,IAQMI,EARN,EAAsBJ,EAASK,MAAM,KAArC,mBAAKC,EAAL,KAAaC,EAAb,KACIC,EAAW,GACXC,EAAY,IAChBC,QAAQC,IAAIL,GACZI,QAAQC,IAAIJ,GAERA,KAGFG,QAAQC,IAAIJ,GACK,MAAbA,EAAM,IACRH,EAASG,EAAM,IAAIK,MAAM,EAAE,GAAGP,MAAM,IACpCK,QAAQC,IAAIP,GACZI,EAAWnB,EAAUE,MAAMa,EAAO,IAAM,IAAMf,EAAUC,MAAMc,EAAO,MAGnEA,EADmB,IAAjBG,EAAMN,OACD,CAACM,EAAM,IAAIK,MAAM,EAAE,IAEjB,CAACL,GAEZG,QAAQC,IAAIP,GACZM,QAAQC,KAAKP,EAAO,IACpBI,EAAWnB,EAAUC,MAAMc,EAAO,KAEpCM,QAAQC,IAAIH,IAGd,KAAOF,GACLG,EAAUI,KAAKP,EAAS,KACxBA,EAASQ,SAASR,EAAS,IAAM,IAKnC,IAFA,IAAIS,EAAI,EACJC,EAAM,GACHP,EAAUR,QACfe,EAAO,SAACC,GACN,IAAMC,EAAIC,KAAKC,MAAMH,EAAE,KACjBI,EAAIF,KAAKC,MAAMH,EAAI,IAAM,GACzBK,EAAIL,EAAI,GAEd,OACGC,EAAI,EACH7B,EAAUC,KAAK4B,GAAK,YACpB,KAEAG,GAAK,EACHhC,EAAUE,KAAK8B,GAAK,IAAMhC,EAAUC,KAAKgC,GACzCjC,EAAUC,KAAK,GAAK+B,EAAIC,IAZzB,CAeJb,EAAUc,SAAWlC,EAAUG,IAAIuB,KAAOC,EAI/C,OAFAN,QAAQC,IAAIK,GACZN,QAAQC,IAAIH,GACLQ,GAAe,KAARA,EAAsB,QAARA,EAAgB,WAAa,YACvD,KACCR,EAASgB,QAAkB,KAARR,EAAa,GAAK,QAAUR,GAAgC,QAApBA,EAASgB,OAAmB,SAAW,UACjG,K,OC7EOC,EATM,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAEpB,OADAhB,QAAQC,IAAIe,GAEV,8BACGA,KC6CMC,EA9CG,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,gBAAiBC,EAAmB,EAAnBA,aAClC,EAAgCC,mBAAS,IAAzC,mBAAO9B,EAAP,KAAiB+B,EAAjB,KA+BA,OACA,uBAAMC,SAbqB,SAACC,GACxBA,EAAMC,iBACN,IAAMC,EAASpC,EAAkBC,EAAU4B,EAAiBG,GAC7C,kBAAXI,EACFN,EAAaM,IAGbJ,EAAY,IACZH,EAAgBO,GAChBC,YAAW,kBAAMR,EAAgB,QAAO,OAI9C,UACI,2DAEI,uBACAS,MAAOrC,EACPsC,SApCiB,SAACL,GACtB,IACMA,EAAMM,OAAOF,MAAMhC,MAAM,KAAK,GAAGJ,OAAS,IAC5CgC,EAAMM,OAAOF,MAAQJ,EAAMM,OAAOF,MAAMhC,MAAM,KAAK,GAAK,IAAM4B,EAAMM,OAAOF,MAAMhC,MAAM,KAAK,GAAGT,UAAU,EAAE,GAC3GgC,EAAgB,6BAChBQ,YAAW,kBAAMR,EAAgB,QAAO,MAG1C,MAAOY,IACT,IAAIC,EAASC,OAAOT,EAAMM,OAAOF,OAC7BlC,MAAMsC,IACRb,EAAgB,oDAChBQ,YAAW,kBAAMR,EAAgB,QAAO,MAExCG,EAAYE,EAAMM,OAAOF,aAyB3B,wBAAQM,KAAK,SAAb,wBCjCOC,EATG,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACjB,OACA,2DAEI,8BAAMA,QCeCC,EAfH,WACV,MAAkChB,mBAAS,IAA3C,mBAAOe,EAAP,KAAkBhB,EAAlB,KACA,EAAwCC,mBAAS,MAAjD,mBAAOiB,EAAP,KAAqBnB,EAArB,KAEA,OACE,gCACGmB,EACE,cAAC,EAAD,CAAcrB,YAAaqB,IAC5B,KACF,cAAC,EAAD,CAAWnB,gBAAiBA,EAAiBC,aAAcA,IAC3D,cAAC,EAAD,CAAWgB,UAAWA,QCZ5BG,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.865ec2b8.chunk.js","sourcesContent":["const numToText = {\r\n    ones: ['', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'TEN', 'ELEVEN', 'TWELVE', 'THIRTEEN', 'FOURTEEN', 'FIFTEEN', 'SIXTEEN', 'SEVENTEEN', 'EIGHTEEN', 'NINETEEN'],\r\n    tens: ['', '', 'TWENTY', 'THIRTY', 'FOURTY', 'FIFTY', 'SIXTY', 'SEVENTY', 'EIGHTY', 'NINETY'],\r\n    sep: ['', ' THOUSAND ', ' MILLION ', ' BILLION ', ' TRILLION ', ' QUADRILLION ', ' QUINTILLION ', ' SEXTILLION ']\r\n  }\r\n  \r\nfor (let decimals in numToText) {\r\n    numToText[decimals] = numToText[decimals].map(eachWord => eachWord.substring(0,1).concat(eachWord.substring(1).toLowerCase()))\r\n}\r\n\r\nconst currencyConverter = (inputNum) => {\r\n    if (inputNum.length === 0) {\r\n      return ''\r\n    }\r\n    inputNum = inputNum.replace(/,/, '')\r\n    if (isNaN(inputNum)) {\r\n      return 'Invalid input'\r\n    }\r\n  \r\n    // let centsStr = \"\"\r\n    // let dollarArr = []\r\n    // if (subArr.length > 2) {\r\n    //     console.log('here')\r\n    //     setErrorMessage(\"can't have over 1 full stops\")\r\n    //     setInputNum('')\r\n    //     setTimeout(() => setErrorMessage(null), 5000)\r\n    // } else if (subArr.length === 0) {\r\n    //   return ''\r\n    // }\r\n    let [dollar, cents] = inputNum.split(\".\")\r\n    let centsStr = \"\"\r\n    let dollarArr = []\r\n    console.log(dollar)\r\n    console.log(cents)\r\n  \r\n    if (cents) {\r\n      // convert decimals\r\n      let digits\r\n      console.log(cents)\r\n      if (cents[0] !== '1') {\r\n        digits = cents+\"0\".slice(0,2).split(\"\")\r\n        console.log(digits)\r\n        centsStr = numToText.tens[+digits[0]] + \" \" + numToText.ones[+digits[1]]\r\n      } else {\r\n        if (cents.length === 1) {\r\n          digits=[cents+\"0\".slice(0,2)]\r\n        } else {\r\n          digits = [cents]\r\n        }\r\n        console.log(digits)\r\n        console.log(+digits[0])\r\n        centsStr = numToText.ones[+digits[0]]\r\n      }\r\n      console.log(centsStr)\r\n    }\r\n  \r\n    while (dollar) {\r\n      dollarArr.push(dollar % 1000)\r\n      dollar = parseInt(dollar / 1000, 10)\r\n    }\r\n  \r\n    let i = 0\r\n    let str = \"\"\r\n    while (dollarArr.length) {\r\n      str = ((a) => {\r\n        const x = Math.floor(a/100)\r\n        const y = Math.floor(a / 10) % 10\r\n        const z = a % 10\r\n  \r\n        return (\r\n          (x > 0\r\n          ? numToText.ones[x] + ' hundred '\r\n          : '') + \r\n          (\r\n            y >= 2 \r\n            ? numToText.tens[y] + ' ' + numToText.ones[z]\r\n            : numToText.ones[10 * y + z]\r\n          )\r\n        )\r\n      })(dollarArr.shift()) + numToText.sep[i++] + str\r\n    }\r\n    console.log(str)\r\n    console.log(centsStr)\r\n    return str + (str !== '' ? (str === 'One' ? ' Dollar ' : ' Dollars ')\r\n    : '') +\r\n      (centsStr.trim() ? (str === '' ? '' : 'and ') + centsStr + (centsStr.trim() === 'One' ? ' Cent ' : ' Cents')\r\n      : '')\r\n  }\r\n\r\nexport default currencyConverter","const Notification = ({ notifString }) => {\r\n    console.log(notifString)\r\n    return (\r\n      <div>\r\n        {notifString}\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Notification","import React, { useState } from \"react\"\r\nimport currencyConverter from \"../utils/currencyConverter\"\r\n\r\nconst InputForm = ({ setErrorMessage, setOutputStr }) => {\r\n    const [inputNum, setInputNum] = useState('')\r\n    const handleFormChange = (event) => {\r\n        try {\r\n          if (event.target.value.split(\".\")[1].length > 2) {\r\n            event.target.value = event.target.value.split(\".\")[0] + \".\" + event.target.value.split(\".\")[1].substring(0,2)\r\n            setErrorMessage(\"100 cents equals a dollar\")\r\n            setTimeout(() => setErrorMessage(null), 5000)\r\n          }\r\n          // console.log(Number(event.target.value))\r\n        } catch (exception) {}\r\n        let numVer = Number(event.target.value)\r\n        if (isNaN(numVer)) {\r\n          setErrorMessage('Input has to have valid dollars and cents format')\r\n          setTimeout(() => setErrorMessage(null), 5000)\r\n        } else {\r\n          setInputNum(event.target.value)\r\n        }\r\n      } \r\n    \r\n      const handleFormSubmit = (event) => {\r\n        event.preventDefault()\r\n        const outStr = currencyConverter(inputNum, setErrorMessage, setInputNum)\r\n        if (outStr !== \"Invalid input\") {\r\n          setOutputStr(outStr)\r\n        }\r\n        else {\r\n          setInputNum('')\r\n          setErrorMessage(outStr)\r\n          setTimeout(() => setErrorMessage(null), 5000)\r\n        }\r\n      }\r\n    return (\r\n    <form onSubmit={handleFormSubmit}>\r\n        <div>\r\n            Enter number to convert:\r\n            <input \r\n            value={inputNum}\r\n            onChange={handleFormChange}\r\n            />\r\n        </div>\r\n        <button type=\"submit\">submit</button>\r\n    </form>\r\n    )\r\n}\r\n\r\nexport default InputForm","import React from \"react\"\r\n\r\nconst OutputDiv = ({ outputStr }) => {\r\n    return (\r\n    <div>\r\n        In plain English, it is:\r\n        <div>{outputStr}</div>\r\n    </div>\r\n    )\r\n} \r\n\r\nexport default OutputDiv","import React, { useState } from \"react\"\nimport currencyConverter from \"./utils/currencyConverter\"\nimport Notification from \"./components/Notification\"\nimport InputForm from \"./components/InputForm\"\nimport OutputDiv from \"./components/OutputDiv\"\n\nconst App = () => {\n  const [outputStr, setOutputStr] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  return (\n    <div>\n      {errorMessage\n      ?  <Notification notifString={errorMessage}/>\n      : null}\n      <InputForm setErrorMessage={setErrorMessage} setOutputStr={setOutputStr}/>\n      <OutputDiv outputStr={outputStr} />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}